/*
This is supposed to create the database, we will see...
*/

/* delete complete db */
DROP SCHEMA PUBLIC CASCADE;

/* -------------------- Setup Tables -------------------- */

/* Holds all type information */
CREATE TABLE type (
	/* use the standard syntax and explicity declare a primary key identity column */
	typeId INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	parentId INTEGER, 
	typeName VARCHAR(1024) UNIQUE NOT NULL
);

/* All methods which are somewhere called on some type */
CREATE TABLE method (
	methodId INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	typeId INTEGER FOREIGN KEY REFERENCES type(typeId),
	methodName VARCHAR(1024) NOT NULL
);

/* Information for type usages which is not calculated and excluding the call list */
CREATE TABLE typeusage (
	typeusageId INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	typeId INTEGER FOREIGN KEY REFERENCES type(typeId),
	class VARCHAR(1024) NOT NULL,
	lineNr INTEGER,
	context VARCHAR(1024) NOT NULL
);

/* links method and type usages to a list of method calls */
CREATE TABLE callList (
	typeusageId INTEGER FOREIGN KEY REFERENCES typeusage(typeusageId),
	callId INTEGER FOREIGN KEY REFERENCES method(methodId),
	position INTEGER
);

/* Show types with all methods which are called on them */
CREATE VIEW typeWithMethods AS
SELECT type.typeName, GROUP_CONCAT(method.methodName SEPARATOR ', ')
	FROM type JOIN method
	ON type.typeId = method.typeId
	GROUP BY type.typeName
;

/* Mapping from supertypes to all their children */
/*
CREATE VIEW children AS
WITH RECURSIVE rec(parentId,childId) AS (
    SELECT NULL, type.typeId FROM type
    WHERE type.parentId IS NULL -- this condition defines the ultimate ancestors in your chain, change it as appropriate
    UNION ALL
	    SELECT rec.typeId, t.typeId FROM type t, rec
		ON t.parentID = rec.typeId
)
SELECT  * FROM rec
;
*/

/*

todos:
understand views / those things I remember to be persistent
look into indices!

--- 
unfinished business:

VIEWS: (are those the ones which are kept persistently and only updated?)

CHILDREN (Parent type id, child type id) -> contains reverse, all children of one parent
EQUAL (tu id, tu id)
ALMOST_EQUAL (tu id, tu id)

Strangeness (tu id, strangeness score)

*/